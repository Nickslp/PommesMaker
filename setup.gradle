import groovy.transform.Field
import groovy.json.JsonSlurper

class SetupManager {

    def serverJarPath
    def serverDownload
    def version
    def rootDir

    SetupManager(rootDir, version) {
        this.rootDir = rootDir
        this.version = version

        serverDownload = getDownload()
        serverJarPath = "${rootDir}/server/${serverDownload[0]}"
    }

    boolean existsServerJar() {
        File file = new File(serverJarPath)
        return file.exists()
    }

    boolean installServer() {
        // Create server folder
        File serverDir = new File(rootDir, "server")
        if (!serverDir.exists()) {
            serverDir.mkdirs()
        }

        // Create EULA file
        File eula = new File(serverDir, "eula.txt")
        if (!eula.exists()) {
            eula.write("eula=true")
        }

        // Download server
        downloadServerJar()
        return true
    }

    void downloadServerJar() {
        println "Downloading server..."
        new File(serverJarPath).withOutputStream { out ->
            new URL(serverDownload[1]).withInputStream { from -> out << from }
        }
        println "Download finished: ${serverDownload[0]}"
    }

    def getDownload() {
        String rawResponse = new URL("https://api.papermc.io/v2/projects/paper/versions/${version}/builds").text
        JsonSlurper jsonSlurper = new JsonSlurper()

        def res = jsonSlurper.parseText(rawResponse)
        def latestBuild = res.builds.last() // Using last() for better readability

        String filename = latestBuild.downloads.application.name
        String downloadUrl = "https://api.papermc.io/v2/projects/paper/versions/${version}/builds/${latestBuild.build}/downloads/${filename}"

        return [filename, downloadUrl]
    }
}

ext.initServer = {
    SetupManager setupManager = new SetupManager(rootProject.projectDir, gradle.mcVersion)

    if (!setupManager.existsServerJar()) {
        println "Installing server..."
        setupManager.installServer()
    } else {
        println "Server already exists."
    }

    return setupManager.serverDownload[0]
}

